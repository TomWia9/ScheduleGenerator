@using ScheduleGenerator.Client.Services
@using ScheduleGenerator.Shared.Dto
@inject IAuthenticationService AuthenticationService
@inject ISchedulesService SchedulesService
@inject SchedulesState SchedulesState
@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Schedule Generator</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="swagger">
                <span class="oi oi-arrow-thick-right" aria-hidden="true"></span> Swagger
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="schedules/new">
                <span class="oi oi-plus" aria-hidden="true"></span> New schedule
            </NavLink>
        </li>
    </ul>

    @if (AuthenticationService.IsUserLoggedIn())
    {
        <hr class="bg-white" />
        <ul class="nav flex-column">
            @if (loading)
            {
                <li class="nav-item px-3">
                    <div class="d-flex align-items-center text-white">
                        <strong>Loading...</strong>
                        <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
                    </div>
                </li>
            }
            else
            {
                if (loadFailed)
                {
                    <li class="nav-item px-3">
                        <div class="d-flex align-items-center text-white">
                            <strong>Load failed</strong>
                        </div>
                    </li>
                }
                else if (!SchedulesState.Schedules.Any())
                {
                    <li class="nav-item px-3">
                        <div class="d-flex align-items-center text-white">
                            <strong>No schedule exists</strong>
                        </div>
                    </li>
                }
                else
                {
                    @foreach (var schedule in SchedulesState.Schedules)
                    {
                        var href = "schedules/" + schedule.Id;
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href=@href>
                                <span class="oi oi-list" aria-hidden="true"></span>
                                <span class="d-inline-block text-truncate" style="max-width: 140px;">@schedule.Name</span>
                            </NavLink>
                        </li>
                    }
                }
            }

        </ul>
    }

</div>

@code {
    private bool collapseNavMenu = true;
    private bool loadFailed;
    private bool loading;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        @if (AuthenticationService.IsUserLoggedIn())
        {
            loading = true;

            var response = await SchedulesService.GetSchedulesAsync();

            if (response.IsSuccessStatusCode)
            {
                var schedules = await response.Content.ReadFromJsonAsync<IEnumerable<ScheduleDto>>();
                SchedulesState.Schedules = schedules!.ToList();
            }
            else
            {
                loadFailed = true;
            }

            loading = false;

            SchedulesState.OnScheduleModified += StateHasChanged;
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Dispose()
    {
        SchedulesState.OnScheduleModified -= StateHasChanged;
    }
}

