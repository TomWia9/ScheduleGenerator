@inject IScheduleItemsService ScheduleItemsService
@inject ScheduleItemsState ScheduleItemsState
@inject IMapper Mapper
@using ScheduleGenerator.Shared.Dto
@using ScheduleGenerator.Client.Services
@using System.Net
@using AutoMapper
@using ScheduleGenerator.Shared.Enums

<EditForm Model="@_scheduleItemForUpdate" OnValidSubmit="@(async () => await EditScheduleItemAsync())">
    <FluentValidator></FluentValidator>

    <div class="d-flex flex-column mb-2">
        <div class="d-flex justify-content-between align-items-center">

            <div class="mx-2">
                <div class="form-group mb-2 text-white">
                    <label>Subject name</label>
                    <InputText @bind-Value="_scheduleItemForUpdate.Subject" class="form-control text-white bg-dark" />
                    <ValidationMessage For="@(() => _scheduleItemForUpdate.Subject)" />
                </div>

                <div class="form-group mb-2 text-white">
                    <label>Room Number</label>
                    <InputText @bind-Value="_scheduleItemForUpdate.RoomNumber" class="form-control text-white bg-dark" />
                    <ValidationMessage For="@(() => _scheduleItemForUpdate.RoomNumber)" />
                </div>

                <div class="form-group mb-2 text-white">
                    <label>Lecturer</label>
                    <InputText @bind-Value="_scheduleItemForUpdate.Lecturer" class="form-control text-white bg-dark" />
                    <ValidationMessage For="@(() => _scheduleItemForUpdate.Lecturer)" />
                </div>

                <div class="form-group mb-2 text-white">
                    <label>Type of classes</label>
                    <InputSelect @bind-Value="_scheduleItemForUpdate.TypeOfClasses" class="form-control text-white bg-dark">
                        @foreach (var typeOfClasses in Enum.GetValues(typeof(TypeOfClasses)))
                        {
                            <option value="@typeOfClasses">@typeOfClasses</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => _scheduleItemForUpdate.TypeOfClasses)" />

                </div>
            </div>

            <div class="mx-2">
                <div class="form-group mb-2 text-white">
                    <label>Day of week</label>
                    <InputSelect @bind-Value="_scheduleItemForUpdate.DayOfWeek" class="form-control text-white bg-dark">
                        @foreach (var dayOfWeek in Enum.GetValues(typeof(WeekDay)))
                        {
                            <option value="@dayOfWeek">@dayOfWeek</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => _scheduleItemForUpdate.DayOfWeek)" />

                </div>
                <div class="form-group mb-2 text-white">
                    <label>Start time</label>
                    <input type="time" @bind="_scheduleItemForUpdate.StartTime" min="07:00" max="20:45" required class="form-control text-white bg-dark" />
                    <ValidationMessage For="@(() => _scheduleItemForUpdate.StartTime)" />
                </div>

                <div class="form-group mb-2 text-white">
                    <label>End time</label>
                    <input type="time" @bind="_scheduleItemForUpdate.EndTime" min="07:15" max="21:00" required class="form-control text-white bg-dark" />
                    <ValidationMessage For="@(() => _scheduleItemForUpdate.EndTime)" />
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-center">
            @if (_updateFailed)
            {
                <div class="alert alert-danger">Update failed, try again later</div>
            }
            else if (_conflict)
            {
                <div class="alert alert-warning">The updated item conflicts with another item</div>
            }
        </div>

    </div>

    <div class="d-flex justify-content-between">
        <button type="button" class="btn btn-secondary w-25" @onclick="Cancel">Cancel</button>
        <button type="submit" class="btn btn-primary w-25">Edit item</button>
    </div>
</EditForm>

@code {

    [Parameter]
    public ScheduleItemDto ScheduleItem { get; set; }

    [Parameter]
    public EventCallback OnScheduleItemUpdated { get; set; }

    [Parameter]
    public EventCallback OnCanceled { get; set; }

    private ScheduleItemForUpdateDto _scheduleItemForUpdate = new();

    private bool _conflict;
    private bool _updateFailed;
    private WeekDay oldWeekDay;

    protected override void OnInitialized()
    {
        oldWeekDay = ScheduleItem.DayOfWeek;
        Mapper.Map(ScheduleItem, _scheduleItemForUpdate);
    }

    private async Task EditScheduleItemAsync()
    {
        var response = await ScheduleItemsService.UpdateScheduleItemAsync(ScheduleItem.ScheduleId, ScheduleItem.Id, _scheduleItemForUpdate);

        if (response.IsSuccessStatusCode)
        {
            var updatedItemResponse = await ScheduleItemsService.GetScheduleItemAsync(ScheduleItem.ScheduleId, ScheduleItem.Id);
            var updatedScheduleItem = await updatedItemResponse.Content.ReadFromJsonAsync<ScheduleItemDto>();
            ScheduleItemsState.UpdateScheduleItem(updatedScheduleItem, oldWeekDay);
            await OnScheduleItemUpdated.InvokeAsync();

        }
        else if (response.StatusCode == HttpStatusCode.Conflict)
        {
            _conflict = true;
        }
        else
        {
            _updateFailed = true;
        }
    }

    private async Task Cancel()
    {
        await OnCanceled.InvokeAsync();
    }

}
