@using ScheduleGenerator.Shared.Dto
@using ScheduleGenerator.Shared.Enums
@using System.ComponentModel
@using System.Net
@using ScheduleGenerator.Client.Services
<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background: #121212;">
                <h5 class="modal-title text-white">Add schedule item</h5>
                <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <EditForm Model="@ScheduleItemForCreation" OnValidSubmit="@(async () => await AddScheduleItemAsync())">
                <FluentValidator></FluentValidator>
                
                <div class="d-flex flex-column" style="background: #181818">
                    <div class="modal-body d-flex justify-content-around align-items-center">

                        <div>
                            <div class="form-group mb-2 text-white">
                                <label>Subject name</label>
                                <InputText @bind-Value="ScheduleItemForCreation.Subject" class="form-control text-white bg-dark" />
                                <ValidationMessage For="@(() => ScheduleItemForCreation.Subject)" />
                            </div>

                            <div class="form-group mb-2 text-white">
                                <label>Room Number</label>
                                <InputText @bind-Value="ScheduleItemForCreation.RoomNumber" class="form-control text-white bg-dark" />
                                <ValidationMessage For="@(() => ScheduleItemForCreation.RoomNumber)" />
                            </div>

                            <div class="form-group mb-2 text-white">
                                <label>Lecturer</label>
                                <InputText @bind-Value="ScheduleItemForCreation.Lecturer" class="form-control text-white bg-dark" />
                                <ValidationMessage For="@(() => ScheduleItemForCreation.Lecturer)" />
                            </div>

                            <div class="form-group mb-2 text-white">
                                <label>Type of classes</label>
                                <InputSelect @bind-Value="ScheduleItemForCreation.TypeOfClasses" class="form-control text-white bg-dark">
                                    @foreach (var typeOfClasses in Enum.GetValues(typeof(TypeOfClasses)))
                                    {
                                        <option value="@typeOfClasses">@typeOfClasses</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => ScheduleItemForCreation.TypeOfClasses)" />

                            </div>
                        </div>

                        <div>
                            <div class="form-group mb-2 text-white">
                                <label>Day of week</label>
                                <InputSelect @bind-Value="ScheduleItemForCreation.DayOfWeek" class="form-control text-white bg-dark">
                                    @foreach (var dayOfWeek in Enum.GetValues(typeof(WeekDay)))
                                    {
                                        <option value="@dayOfWeek">@dayOfWeek</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => ScheduleItemForCreation.DayOfWeek)" />

                            </div>
                            <div class="form-group mb-2 text-white">
                                <label>Start time</label>
                                <input type="time" @bind="ScheduleItemForCreation.StartTime" min="07:00" max="20:45" required class="form-control text-white bg-dark" />
                                <ValidationMessage For="@(() => ScheduleItemForCreation.StartTime)" />
                            </div>

                            <div class="form-group mb-2 text-white">
                                <label>End time</label>
                                <input type="time" @bind="ScheduleItemForCreation.EndTime" min="07:15" max="21:00" required class="form-control text-white bg-dark" />
                                <ValidationMessage For="@(() => ScheduleItemForCreation.EndTime)" />
                            </div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-center">
                        @if (_creationFailed)
                        {
                            <div class="alert alert-danger">Creation failed, try again later</div>
                        }
                        else if (_conflict)
                        {
                            <div class="alert alert-warning">The created item conflicts with another item</div>
                        }
                    </div>
                    
                </div>
                
                <div class="modal-footer d-flex justify-content-between" style="background: #121212;">
                    <button type="button" class="btn btn-secondary w-25" data-dismiss="modal" @onclick="Close">Cancel</button>
                    <button type="submit" class="btn btn-primary w-25">Add</button>
                </div>
            </EditForm>

        </div>
    </div>
</div>


@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    private ScheduleItemForCreationDto ScheduleItemForCreation { get; set; } = new();

    [Parameter]
    public int ScheduleId { get; set; }

    [Inject]
    private IScheduleItemsService ScheduleItemsService { get; set; }

    [Inject]
    private ScheduleItemsState ScheduleItemsState { get; set; }

    private string _modalDisplay = "none;";
    private string _modalClass = "";
    private bool _showBackdrop = false;

    private bool _creationFailed = false;
    private bool _conflict = false;

    public void Open()
    {
        _modalDisplay = "block;";
        _modalClass = "Show";
        _showBackdrop = true;

        ScheduleItemForCreation = new ScheduleItemForCreationDto();
        _creationFailed = false;
        _conflict = false;

        StateHasChanged();
    }

    private void Close()
    {
        _modalDisplay = "none";
        _modalClass = "";
        _showBackdrop = false;
        StateHasChanged();
    }

    private async Task AddScheduleItemAsync()
    {
        var response = await ScheduleItemsService.CreateScheduleItemAsync(ScheduleId, ScheduleItemForCreation);

        if (response.IsSuccessStatusCode)
        {
            var scheduleItem = await response.Content.ReadFromJsonAsync<ScheduleItemDto>();
            ScheduleItemsState.AddScheduleItem(scheduleItem);
            Close();
        }
        else if(response.StatusCode == HttpStatusCode.Conflict)
        {
            _conflict = true;
        }
        else
        {
            _creationFailed = true;
        }
    }

}